Name     Nessi ;
PartNo   00 ;
Date     2024-08-05 ;
Revision 01 ;
Designer Anders Granlund ;
Company  HappyDaze ;
Assembly None ;
Location  ;
Device   f1508ispplcc84;


//------------------------------------------------------------------------------
// Copyright Anders Granlund 2024.
// This source describes Open Hardware and is licensed under the CERN-OHLW v2
// You may redistribute and modify this documentation and make products
// using it under the terms of the CERN-OHL-W v2 (https:/cern.ch/cern-ohl).
// This documentation is distributed WITHOUT ANY EXPRESS OR IMPLIED
// WARRANTY, INCLUDING OF MERCHANTABILITY, SATISFACTORY QUALITY
// AND FITNESS FOR A PARTICULAR PURPOSE.
// Please see the CERN-OHL-W v2 for applicable conditions.
//------------------------------------------------------------------------------

//--------------------------------------------
// ATF1508AS-7JX84 : PLCC84, ISP, 7ns
//--------------------------------------------

PROPERTY ATMEL{JTAG=on};
PROPERTY ATMEL{TDI_pullup=on};
PROPERTY ATMEL{TMS_pullup=on};
PROPERTY ATMEL{pd1=off};
PROPERTY ATMEL{pd2=off};
PROPERTY ATMEL{cascade_logic=off};
PROPERTY ATMEL{logic_doubling=off};
PROPERTY ATMEL{output_fast=on};
PROPERTY ATMEL{pin_keep=off};
PROPERTY ATMEL{preassign=keep};
PROPERTY ATMEL{security=off};
PROPERTY ATMEL{xor_synthesis=on};


//--------------------------------------------
// JTAG reserved
//--------------------------------------------
//pin 14 = ;            // JTAG_TDI
//pin 23 = ;            // JTAG_TMS
//pin 62 = ;            // JTAG_TCK
//pin 71 = ;            // JTACK_TDO


//--------------------------------------------
// Global inputs
//--------------------------------------------
pin 81 = SPARE_J106_IN_81;      // unused J106 (in)
pin 83 = BCLK;
pin 84 = SPARE_J105_IN_84;      // unused J105 (in - hi/lo jumpered)
pin 1  = !RSTI;
pin 2  = PCLK;


//--------------------------------------------
// I/O blocks
//--------------------------------------------
pin 4  = !TA;
pin 5  = !TEA;
pin 6  = !AVEC;
pin 8  = !TBI;
pin 9  = !TCI;
pin 10 = CPUX1;
pin 11 = !TRA;
pin 12 = !CLKEN;

pin 15 = TT1;
pin 16 = TT0;
pin 17 = !TIP;
pin 18 = !TS;
pin 20 = TM1;
pin 21 = TM0;
pin 22 = TM2;

pin 24 = !SAS;
pin 25 = SIZ1;
pin 27 = SIZ0;
pin 28 = RW;
pin 29 = !CLA;
pin 30 = A0;
pin 31 = A1;

pin 33 = A9;
pin 34 = A5;
pin 35 = A25;
pin 36 = A10;
pin 37 = A24;
pin 39 = A29;
pin 40 = A30;
pin 41 = A31;

pin 44 = !RB0RD;
pin 45 = !RB0WR;
pin 46 = !RB1RD;
pin 48 = !RB1WR;
pin 49 = !RB2RD;
pin 50 = !RB2WR;
pin 51 = !RB3RD;
pin 52 = !RB3WR;

pin 54 = !IOCS16;
pin 55 = !EXCS;
pin 56 = !EXDSACK0;
pin 57 = !EXTA;
pin 58 = !EXDS;
pin 60 = !EXDTACK;
pin 61 = !EXDSACK1;

pin 63 = !ISA8;
pin 64 = !ISAIO;
pin 65 = !ISACS;
pin 67 = !ISANOWS;
pin 68 = ISARDY;
pin 69 = !RESET;
pin 70 = !RSTO;

pin 73 = SPARE_J106_IO_73;            // unused J106 (io)
pin 74 = !IACK;
pin 75 = !IDECS;
pin 76 = !YMCS;
pin 77 = !MFP2CS;
pin 79 = !MFP1CS;
pin 80 = !UARTCS;



//--------------------------------------------
//
// General logic
//
//--------------------------------------------
CLKEN = !BCLK # CPUX1;

RESET = RSTI # RSTO;        // peripheral reset
TEA = 'b'0;                 // bus error
TRA = 'b'0;                 // bus retry


//----------------------------------------------------------------------------------------
//
// Interrupts
//  TT1:0 = 11
//  TM2:0 = IPL
//  A31:0 = $ffffffff
//
// Breakpoint
//  TT1:0 = 11
//  TM2:0 = 0
//  A32:0 = 00000000
//
// LPSTOP
//  TT1:0 = 11
//  TM2:0 = 0
//  A32:0 = $fffffffe
//
//----------------------------------------------------------------------------------------

IRQCYCLE    = [TT1..0]:'b'11;
BUSCYCLE    = [TT1..0]:'b'0X;
AUTOIRQ     = IRQCYCLE & !([TM2..0]:'b'110);  // autovector everything except mfp
MFPIRQ      = IRQCYCLE & ([TM2..0]:'b'110);   // MFP = IRQ6
AVEC        = !MFPIRQ;


//----------------------------------------------------------------------------------------
//
// Memory map : 32bit
//
//----------------------------------------------------------------------------------------
DECODE_SIMM0        = [A31..0]:'b'000XXX00XXXXXXXXXXXXXXXXXXXXXXXX;	// $00000000
DECODE_SIMM1        = [A31..0]:'b'000XXX01XXXXXXXXXXXXXXXXXXXXXXXX;	// $01000000
DECODE_SIMM2        = [A31..0]:'b'000XXX10XXXXXXXXXXXXXXXXXXXXXXXX;	// $02000000
DECODE_SIMM3        = [A31..0]:'b'000XXX11XXXXXXXXXXXXXXXXXXXXXXXX;	// $03000000
DECODE_SIMM         = [A31..0]:'b'000XXXXXXXXXXXXXXXXXXXXXXXXXXXXX;	// $0X000000
DECODE_UART         = [A31..0]:'b'001XXX00XXXXXXXXXXXXXXXXXXXXXXXX;	// $20000000

//----------------------------------------------------------------------------------------
//
// Memory map : 16/8 bit
//
//----------------------------------------------------------------------------------------
DECODE_IDE          = [A31..0]:'b'101XXX00XXXXXXXXXXXXX00XXXXXXXXX;	// $A0000000
DECODE_MFP2         = [A31..0]:'b'101XXX00XXXXXXXXXXXXX01XXXXXXXXX;	// $A0000A00

DECODE_YM           = [A31..0]:'b'101XXX01XXXXXXXXXXXXX00XXXXXXXXX;	// $A1000800    ($ff8800)
DECODE_MFP1         = [A31..0]:'b'101XXX01XXXXXXXXXXXXX01XXXXXXXXX;	// $A1000A00    ($fffa00)
DECODE_ACIA         = [A31..0]:'b'101XXX01XXXXXXXXXXXXX10XXXXXXXXX;	// $A1000C00    ($fffc00)
DECODE_INV1         = [A31..0]:'b'101XXX01XXXXXXXXXXXXX11XXXXXXXXX;	// $A1000e00    ($fffe00)

DECODE_ISA_A_RAM8   = [A31..0]:'b'100XXX00XXXXXXXXXXXXXXXXXXXXXXXX;	// $80000000
DECODE_ISA_A_IO8    = [A31..0]:'b'100XXX01XXXXXXXXXXXXXXXXXXXXXXXX;	// $81000000
DECODE_ISA_A_RAM16  = [A31..0]:'b'100XXX10XXXXXXXXXXXXXXXXXXXXXXXX;	// $82000000
DECODE_ISA_A_IO16   = [A31..0]:'b'100XXX11XXXXXXXXXXXXXXXXXXXXXXXX;	// $83000000

DECODE_ISA_RAM16    = DECODE_ISA_A_RAM16;
DECODE_ISA_IO16     = (DECODE_ISA_A_IO8 & !(!SIZ1 & SIZ0)) # DECODE_ISA_A_IO16;
DECODE_ISA_IO8      = DECODE_ISA_A_IO8 & !DECODE_ISA_IO16;
DECODE_ISA_RAM8     = DECODE_ISA_A_RAM8;


DECODE_ISA          = DECODE_ISA_RAM8 # DECODE_ISA_IO8 # DECODE_ISA_RAM16 # DECODE_ISA_IO16;
DECODE_ISA16        = DECODE_ISA_IO16 # DECODE_ISA_RAM16;
DECODE_68150        = DECODE_IDE # DECODE_YM # DECODE_MFP1 # DECODE_MFP2 # DECODE_ISA;


//----------------------------------------------------------------------------------------
// Localbus
//----------------------------------------------------------------------------------------
// Quick and dirty, clock speed dependent. Should be refactored and be registered.
// SIMMS has a long hold time and data bus will be tainted for up to 20ns after access
//
// todo:
//  - different paths for:
//      - 55ns SIMM
//      - 10ns SIMM
//      - UART
//      - Interrupt cycles
//  - burst for SIMMS
//  - timeout & undecoded access
//  - work on any clock speed
//----------------------------------------------------------------------------------------
node LBUSEN;
node LBUSTA;
node [BSTATE0..5];

[BSTATE0..5].ck = PCLK;
[BSTATE0..5].ar = RSTI # BSTATE5 # (LBUSTA & TS) # !TIP;
BSTATE0.d = BSTATE0 # SAS;      // start late to ensure we are rid of crap on the bus
BSTATE1.d = BSTATE0;            // we could probably start one clock earlier though.
BSTATE2.d = BSTATE1;
BSTATE3.d = BSTATE2;
BSTATE4.d = BSTATE3;
BSTATE5.d = BSTATE4;

LBUSTA = BSTATE3 & !BSTATE5 & TIP;          // TA during 50-70ns
SIMMEN = TIP & BSTATE0 & !BSTATE4;          // total 60ns, OE 40ns
UARTEN = TIP & BSTATE0 & !BSTATE4 & (RW # !BSTATE3);


//----------------------------------------------------------------------------------------
// RAM / ROM
//----------------------------------------------------------------------------------------
// todo: change to new ROM overlay method which work regardless of oscillator
//
//----------------------------------------------------------------------------------------
node ROM_OVERLAY_DISABLED;
ROM_OVERLAY_DISABLED.ck = TS & RW & DECODE_SIMM3;
ROM_OVERLAY_DISABLED.ar = RSTI;
ROM_OVERLAY_DISABLED.d = 'b'1;

RB0RD = SIMMEN &  RW & (DECODE_SIMM0 # DECODE_ACIA) & ROM_OVERLAY_DISABLED;
RB0WR = SIMMEN & !RW & DECODE_SIMM0;
RB1RD = SIMMEN &  RW & DECODE_SIMM1;
RB1WR = SIMMEN & !RW & DECODE_SIMM1;
RB2RD = SIMMEN &  RW & DECODE_SIMM2;
RB2WR = SIMMEN & !RW & DECODE_SIMM2;
RB3RD = SIMMEN &  RW & (DECODE_SIMM3 # (DECODE_SIMM0 & !ROM_OVERLAY_DISABLED));
RB3WR = SIMMEN & !RW & DECODE_SIMM3;

TCI = !(TIP & (DECODE_SIMM /*# DECODE_ACIA*/));

TBI = 'b'1;                 // burst inhibit
CLA = 'b'0;                 // burst address increment


//----------------------------------------------------------------------------------------
// UART
//----------------------------------------------------------------------------------------
UARTCS = UARTEN & DECODE_UART;


//----------------------------------------------------------------------------------------
// MC68150 bus
//----------------------------------------------------------------------------------------
// Force asynchronous termination by negating CS _after_ 68150:TA.
// Synchronous mode is impossible due to how the 68150:CS signal was
// routed to both the 68150 as well as data-bus buffers.
//
// Asynchronous termination:
//  68150 asserts TA and holds it until CS is negated
//  68150 holds TA between 2-8.5ns after negating CS
//  Buffers hold data valid between 1.5-7ns after negating CS
// 
//  We sample 68150:TA and control how it becomes presented to 68060
//  We negated 68150:CS after data was read by CPU, the cpu-side bus
//  will now be tained for up to 7ns, the 68150 side longer.
//----------------------------------------------------------------------------------------

SELECT_68150 = TIP & (DECODE_68150 # MFPIRQ);

node [ESTATE0..8];
[ESTATE0..8].ck = PCLK;
[ESTATE0..8].ar = RSTI # ESTATE8;
ESTATE0.d = ESTATE0 # (TS & SELECT_68150);      // --> 68060:TS
ESTATE1.d = ESTATE0;                            // 68150:CS -->
ESTATE2.d = ESTATE1;                            // 68150 isn't meant to TA for a while so
ESTATE3.d = ESTATE2;                            // delay for a bit until we look.
ESTATE4.d = ESTATE3;
ESTATE5.d = ESTATE4 & EXTA;                     // --> 68150:TA
ESTATE6.d = ESTATE5;                            // 060:TA -->
ESTATE7.d = ESTATE6;                            // 060:TA -->
ESTATE8.d = ESTATE7;                            // !68150:CS -->

EBUSTA = ESTATE6 & !ESTATE8;
EXCS = ESTATE1 & !ESTATE8;


// todo:
//  - waitstate counters could be shared
//  - we probably want to register EXDSACK to control skew and hold time
//  - only consider DTACK for the device accessed
node [YMDTACK0..3];
node [IDEDTACK0..5];
EXDSACK1 = EXDTACK # YMDTACK3 # IDEDTACK5 # ISADSACK1;
EXDSACK0 = ISADSACK0;


//----------------------------------------------------------------------------------------
// 68150 : IRQ
//----------------------------------------------------------------------------------------
IACK = EXDS & MFPIRQ;

//----------------------------------------------------------------------------------------
// 68150 : MFP
//----------------------------------------------------------------------------------------
MFP1CS = EXDS & DECODE_MFP1;
MFP2CS = EXDS & DECODE_MFP2;

//----------------------------------------------------------------------------------------
// 68150 : YM
//----------------------------------------------------------------------------------------
YMCS = EXDS & DECODE_YM;
[YMDTACK0..3].ck = BCLK;
[YMDTACK0..3].ar = RSTI # !YMCS;
YMDTACK3.d = YMDTACK2;
YMDTACK2.d = YMDTACK1;
YMDTACK1.d = YMDTACK0;
YMDTACK0.d = 'b'1;

//----------------------------------------------------------------------------------------
// 68150 : IDE
//----------------------------------------------------------------------------------------
IDECS = EXDS & DECODE_IDE;
[IDEDTACK0..5].ck = BCLK;
[IDEDTACK0..5].ar = RSTI # !IDECS;
IDEDTACK5.d = IDEDTACK4;
IDEDTACK4.d = IDEDTACK3;
IDEDTACK3.d = IDEDTACK2;
IDEDTACK2.d = IDEDTACK1;
IDEDTACK1.d = IDEDTACK0;
IDEDTACK0.d = 'b'1;

//----------------------------------------------------------------------------------------
// 68150 : ISA
//----------------------------------------------------------------------------------------
// quick and dirty and should be refactored.
//  - sample ZEROWS and act accordingly
//  - sample IOCHRDY at correct times
//  - sample IOCS16 and act upon it
//  - more proper timing and consideration for back-to-back access
//----------------------------------------------------------------------------------------
node [ISADTACK0..16];

ISA8 = !DECODE_ISA16;
ISAIO = DECODE_ISA_IO8 # DECODE_ISA_IO16;

ISADS = EXDS & DECODE_ISA;
ISACS = ISADS & ISADTACK0 & (RW # !ISADTACK16);

ISADSACK1 = ISADS & DECODE_ISA16 & ISADTACK16;
ISADSACK0 = ISADS & !DECODE_ISA16 & ISADTACK16;


node ISADONE;
ISADONE.ck = BCLK;
ISADONE.ar = RSTI # !ISADS;
ISADONE.d = ISARDY;

[ISADTACK0..16].ck = BCLK;
[ISADTACK0..16].ar = RSTI # !ISADS;
ISADTACK16.d = ISADTACK15;
ISADTACK15.d = ISADTACK14;
ISADTACK14.d = ISADTACK13;
ISADTACK13.d = ISADTACK12 & (ISADONE # !RW);
ISADTACK12.d = ISADTACK11;
ISADTACK11.d = ISADTACK10;
ISADTACK10.d = ISADTACK9;// # (DECODE_ISA_RAM16);      // et4k: this is ok for writes too on fast cards
ISADTACK9.d = ISADTACK8;
ISADTACK8.d = ISADTACK7;
ISADTACK7.d = ISADTACK6;
ISADTACK6.d = ISADTACK5;
ISADTACK5.d = ISADTACK4 # (DECODE_ISA_RAM16);      // et4k: seems fine on several cards
ISADTACK4.d = ISADTACK3;
ISADTACK3.d = ISADTACK2;
ISADTACK2.d = ISADTACK1;
ISADTACK1.d = ISADTACK0;
ISADTACK0.d = 'b'1;



//----------------------------------------------------------------------------------------
// Bus cycle end
//----------------------------------------------------------------------------------------

TA = AUTOIRQ # (
    TIP & (
        (SELECT_68150 & EBUSTA) #
        (!SELECT_68150 & LBUSTA)
    )
);

